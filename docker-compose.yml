services:
  fast_api:
    restart: always
    build:
      context: .
      dockerfile: ./docker/fastapi/Dockerfile
    volumes:
      - .:/app
    command: /start
    ports:
      - 8080:8000
    env_file:
      - .env
    depends_on:
      - db
      - rabbitmq

  rabbitmq:
    hostname: rabbitmq
    image: rabbitmq:4.0.3-management
    env_file:
      - .env
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    depends_on:
      - db

  celery_worker:
    build: 
      context: .
      dockerfile: ./docker/fastapi/Dockerfile
    command: /start-celeryworker
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      - rabbitmq
      - db
      - fast_api

  dashboard:
    build: 
      context: .
      dockerfile: ./docker/fastapi/Dockerfile
    command: /start-flower
    volumes:
      - .:/app
    ports:
      - 5555:5555
    env_file:
      - .env
    depends_on:
      - celery_worker
      - rabbitmq
      - db
      - fast_api

  db:
    restart: always
    image: postgres:16.3-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    hostname: db
    env_file:
      - .env

  test_db:
    restart: always
    image: postgres:16.3-alpine
    volumes:
      - test_postgres_data:/var/lib/postgresql/data/
    hostname: test_db
    expose:
      - 5431
    environment:
      - POSTGRES_DB=${TEST_POSTGRES_DB}
      - POSTGRES_PASSWORD=${TEST_POSTGRES_PASSWORD}

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    expose:
      - 9090
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"

  alertmanager:
    image: prom/alertmanager:v0.20.0
    container_name: alertmanager
    volumes:
      - ./alertmanager:/etc/alertmanager
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    restart: unless-stopped
    expose:
      - 9093
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"

  grafana:
    image: grafana/grafana
    container_name: grafana
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - DATABASE_USER=${DB_USER}
      - DATABASE_PASS=${DB_PASSWORD}
      - DATABASE_NAME=${DB_NAME}
      - DATABASE_HOST=${DB_HOST}
      - DATABASE_SSL_MODE=disable
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    restart: unless-stopped
    expose:
      - 3000
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"

  nodeexporter:
    image: prom/node-exporter:v0.18.1
    container_name: nodeexporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    expose:
      - 9100
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"

  pushgateway:
    image: prom/pushgateway:v1.2.0
    container_name: pushgateway
    restart: unless-stopped
    expose:
      - 9091
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"
  
  caddy:
    image: stefanprodan/caddy
    container_name: caddy
    ports:
      - "3000:3000"
      - "9090:9090"
      - "9093:9093"
      - "9091:9091"
    volumes:
      - ./caddy:/etc/caddy
    environment:
      - ADMIN_USER=${ADMIN_USER}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
    restart: unless-stopped
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"

volumes:
  postgres_data:
  test_postgres_data:
  rabbitmq-data:
  prometheus-data: {}
  grafana-data: {}

networks:
  monitor-net:
    driver: bridge
